# -*- coding: utf-8 -*-
"""SMART_QUESTION_04 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GtFGHrDmLuOPQ1XoyqC1IAcfEeTegcFs
"""
#%%
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import pearsonr
import seaborn as sns
from sklearn.preprocessing import StandardScaler

#%%

data_games=pd.read_csv('/Users/aneripatel/Downloads/DM_PROJECT/games.csv')

data_games.head(2)
#%%
data_games.shape
#%%
data_games.info()
#%%
data_games.describe()
#%%
data_games.isna().sum()
#%%
# Rename columns with corrected names
data_games=data_games.rename(columns={'GAME_DATE_EST': 'Date', 'GAME_STATUS_TEXT': 'GAMES_STATUS'})
#%% [Markdown]
# Now, the columns should be renamed as expected
#%%
data_games= data_games.drop(columns=['TEAM_ID_home', 'TEAM_ID_away'])
#%%
"""# Changing columns datatype"""
#%%
data_games['Date']= pd.to_datetime(data_games['Date'])


data_games['GAME_ID'] = data_games['GAME_ID'].astype(str)
data_games['HOME_TEAM_ID'] = data_games['HOME_TEAM_ID'].astype(str)
data_games['VISITOR_TEAM_ID'] = data_games['VISITOR_TEAM_ID'].astype(str)
data_games['SEASON'] = pd.to_datetime(data_games['SEASON'], format='%Y').dt.strftime('%Y')#.dt.strftime('%Y') then extracts only the year component in string format, effectively displaying the year while keeping it in a datetime-like object.

data_games.info()


#%%
"""# NOW dealing with null values"""

data_games.isna().sum()
#%%


data_games.dropna(inplace=True)
#%%

data_games.shape

#%%
# Data is Clean Now
#%%
# UNDERSTANDING DATASET


data_games.head()

# Selecting potential predictors and the target variable (PTS_home)
predictors = ["FG_PCT_home", "FT_PCT_home", "FG3_PCT_home", "AST_home", "REB_home",
              "FG_PCT_away", "FT_PCT_away", "FG3_PCT_away", "AST_away", "REB_away"]
target = "PTS_home"

# Creating a new dataframe with just the selected columns
analysis_df = data_games[predictors + [target]]

# Calculating the correlation matrix
correlation_matrix = analysis_df.corr()

# Plotting the correlation matrix
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm")
plt.title("Correlation Matrix")
plt.show()

#%%
# Data Preparation

model_data=data_games[["FG_PCT_home", "FT_PCT_home", "FG3_PCT_home", "AST_home", "REB_home",
              "FG_PCT_away", "FT_PCT_away", "FG3_PCT_away", "AST_away", "REB_away","PTS_home"]]

model_data.head()
#%%
features = model_data.drop('PTS_home', axis=1)
target = model_data['PTS_home']
#%%
# Initialize the StandardScaler
scaler = StandardScaler()
#%%
# Fit the scaler on the features and transform them
features_scaled = scaler.fit_transform(features)
features_scaled
#%%
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
#%%
# Splitting the data
X_train, X_test, y_train, y_test = train_test_split(features_scaled, target, test_size=0.2, random_state=42)
# Building the model
model = LinearRegression()
model.fit(X_train, y_train)
#%%
model.coef_
#%%
home_team_score_prediction= model.predict(X_test)
home_team_score_prediction_train= model.predict(X_train)
#%%
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
#%%
# Calculating metrics
mse = mean_squared_error(y_train,home_team_score_prediction_train)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_train,home_team_score_prediction_train)
r2 = r2_score(y_train,home_team_score_prediction_train)

print(f"Mean Squared Error: {mse}")
print(f"Root Mean Squared Error: {rmse}")
print(f"Mean Absolute Error: {mae}")
print(f"R-squared: {r2}")
#%%
# Rounding predictions to the nearest integer
home_team_score_prediction = np.rint(home_team_score_prediction)

# If you want them as integers
home_team_score_prediction = home_team_score_prediction.astype(int)
pd.DataFrame(home_team_score_prediction,y_test).rename({'PTS_home':'Actual Data', 0:'Predicted Data'})
#%%
# Assuming 'home_team_score_prediction' is your array of predictions
# Rounding predictions to the nearest integer
home_team_score_prediction = np.rint(home_team_score_prediction)

# Converting to integers
home_team_score_prediction = home_team_score_prediction.astype(int)

# Creating a DataFrame for comparison
output_data = pd.DataFrame({
    'Actual Data': y_test,
    'Predicted Data': home_team_score_prediction
}).reset_index(drop=True)

# Displaying the DataFrame
output_data.head()
#%%
# Calculating metrics
mse = mean_squared_error(output_data['Actual Data'],output_data['Predicted Data'])
rmse = np.sqrt(mse)
mae = mean_absolute_error(output_data['Actual Data'],output_data['Predicted Data'])
r2 = r2_score(output_data['Actual Data'],output_data['Predicted Data'])

print(f"Mean Squared Error: {mse}")
print(f"Root Mean Squared Error: {rmse}")
print(f"Mean Absolute Error: {mae}")
print(f"R-squared: {r2}")

for column in model_data.columns:
    if column != 'PTS_home':
        model_data[column + '_log'] = np.log(model_data[column] + 1)

# Displaying the transformed data
model_data.head()
#%%

# Selecting the relevant columns from the data_games dataset
data = model_data[["FG_PCT_home_log", "FT_PCT_home_log", "FG3_PCT_home_log", "AST_home_log", "REB_home_log",
                   "FG_PCT_away_log", "FT_PCT_away_log", "FG3_PCT_away_log", "AST_away_log", "REB_away_log"]]



# Displaying the updated DataFrame
data.head()
#%%
# Splitting the data
X_train, X_test, y_train, y_test = train_test_split(data, model_data['PTS_home'], test_size=0.2, random_state=42)

# Building the model
model = LinearRegression()
model.fit(X_train, y_train)

home_team_score_prediction= model.predict(X_test)
home_team_score_prediction_train= model.predict(X_train)
# Assuming 'home_team_score_prediction' is your array of predictions
# Rounding predictions to the nearest integer
home_team_score_prediction = np.rint(home_team_score_prediction)

# Converting to integers
home_team_score_prediction = home_team_score_prediction.astype(int)

# Creating a DataFrame for comparison
output_data = pd.DataFrame({
    'Actual Data': y_test,
    'Predicted Data': home_team_score_prediction
}).reset_index(drop=True)

# Displaying the DataFrame
output_data.head()
#%%
# Calculating metrics
mse = mean_squared_error(output_data['Actual Data'],output_data['Predicted Data'])
rmse = np.sqrt(mse)
mae = mean_absolute_error(output_data['Actual Data'],output_data['Predicted Data'])
r2 = r2_score(output_data['Actual Data'],output_data['Predicted Data'])

print(f"Mean Squared Error: {mse}")
print(f"Root Mean Squared Error: {rmse}")
print(f"Mean Absolute Error: {mae}")
print(f"R-squared: {r2}")

